@page "/"
@page "/counter/{CurrentCount:int}"
@using System.Diagnostics
@implements IDisposable
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter value = @CurrentCount</h1>

<div class="form-check">
    <input @bind="@_forceLoad" type="checkbox" class="form-check-input" id="ForceLoadCheckbox"/>
    <label class="form-check-label" for="ForceLoadCheckbox">Force page reload on navigate</label>
</div>

<div class="btn-group" role="group">
    <button @onclick="@(() => AlterBy(-1))" class="btn btn-primary">-</button>
    <input value="@CurrentCount" readonly class="form-control"/>
    <button @onclick="@(() => AlterBy(1))" class="btn btn-primary">+</button>
</div>
<a class="btn btn-secondary" href="/Counter/0">Reset</a>
<p>
    <em>Page redirects to ibm.com when count hits 10!</em>
</p>

@code {
    [Parameter] public int CurrentCount { get; set; }

    bool _forceLoad;

    void AlterBy(int adjustment)
    {
        var newCount = CurrentCount + adjustment;
        if (newCount >= 10)
            NavigationManager.NavigateTo("https://ibm.com");

        NavigationManager.NavigateTo($"/counter/{newCount}", _forceLoad);
    }

    protected override void OnInitialized()
    {
        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var navigationMethod = e.IsNavigationIntercepted ? "html" : "code";
        Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }

}
