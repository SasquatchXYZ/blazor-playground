@page "/"
@using System.Diagnostics
@inject IJSRuntime JsRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Text received</h1>
<ul>
    @foreach (var text in _textHistory)
    {
        <li>@text</li>
    }
</ul>

@code
{
    List<string> _textHistory = new();
    DotNetObjectReference<Home>? _objectReference;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // This code has a memory leak and will be fixed in a future exercise
            _objectReference = DotNetObjectReference.Create(this);
            JsRuntime.InvokeVoidAsync("BlazorUniversity.startRandomGenerator", _objectReference);
        }
    }

    [JSInvokable("AddText")]
    public void AddTextToTextHistory(string text)
    {
        _textHistory.Add(text);
        while (_textHistory.Count() > 10)
        {
            _textHistory.RemoveAt(0);
        }

        StateHasChanged();
        Debug.WriteLine("DotNet: Received " + text);
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);

        // Now dispose our object reference so our component can be garbace collected
        _objectReference?.Dispose();
    }
}
