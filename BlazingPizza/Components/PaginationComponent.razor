@typeparam TItem

<div class="container-sm py-4">
    @ItemContent(Items.ElementAt(_selectedIndex))
</div>
<nav aria-label="Pagination functionality">
    <ul class="pagination pagination-lg justify-content-center">
        <li class="page-item @(PreviousDisabled ? "disabled" : "")" disabled="@PreviousDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(0))">
                <span>⏪</span>
            </a>
        </li>
        <li class="page-item @(PreviousDisabled ? "disabled" : "")" disabled="@PreviousDisabled">
            <a class="page-link" @onclick="DecrementIndex">
                <span>⬅️</span>
            </a>
        </li>
        @foreach ((int index, TItem item) in Items.Select((item, index) => (index, item)))
        {
            var isActive = index == _selectedIndex;
            <li class="page-item @(isActive ? "active" : "")">
                <a class="page-link" @onclick="@(() => SetIndex(index))">
                    @ItemLabel(item)
                </a>
            </li>
        }
        <li class="page-item @(NextDisabled ? "disabled" : "")" disabled="@NextDisabled">
            <a class="page-link" @onclick="IncrementIndex">
                <span>➡️</span>
            </a>
        </li>
        <li class="page-item @(NextDisabled ? "disabled" : "")" disabled="@NextDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(Items.Count - 1))">
                <span>⏩</span>
            </a>
        </li>
    </ul>
</nav>

@code
{
    [Parameter, EditorRequired] public required List<TItem> Items { get; set; }

    [Parameter, EditorRequired] public required RenderFragment<TItem> ItemContent { get; set; }

    [Parameter, EditorRequired] public required Func<TItem, MarkupString> ItemLabel { get; set; }

    int _selectedIndex;

    bool PreviousDisabled => _selectedIndex == 0;
    bool NextDisabled => _selectedIndex == Items.Count - 1;

    void IncrementIndex() => _selectedIndex++;
    void DecrementIndex() => _selectedIndex--;
    void SetIndex(int index) => _selectedIndex = index;

    protected override void OnInitialized() =>
        _selectedIndex = Items.Count - 1;
}
