@page "/myorders/{orderId:int}"
@using BlazingPizza.Model
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable

<div class="main">
    @if (_invalidOrder)
    {
        <h2>Order Not Found</h2>
        <p>We're sorry but this order no long exists.</p>
    }
    else if (_orderWithStatus is null)
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    <text>Loading...</text>
                </h2>
                <p class="ml-auto mb-0">
                    ...
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order Placed @_orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@_orderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    @if (IsOrderIncomplete)
                    {
                        <div class="spinner-border text-danger float-right" role="status">
                            <span class="sr-only">Checking your order status...</span>
                        </div>
                    }
                    @foreach (var pizza in _orderWithStatus.Order.Pizzas)
                    {
                        <p>
                            <strong>
                                @(pizza.Size)"
                                @pizza.Special!.Name
                                (Â£@pizza.GetFormattedTotalPrice())
                            </strong>
                        </p>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public int OrderId { get; set; }
    OrderWithStatus? _orderWithStatus;
    bool _invalidOrder;
    bool IsOrderIncomplete => _orderWithStatus is null || _orderWithStatus.IsDelivered == false;
    PeriodicTimer _timer = new(TimeSpan.FromSeconds(3));

    protected override async Task OnParametersSetAsync() =>
        await GetLatestOrderStatusUpdatesAsync();

    protected override Task OnAfterRenderAsync(bool firstRender) =>
        firstRender ? StartPollingTimerAsync() : Task.CompletedTask;

    async Task GetLatestOrderStatusUpdatesAsync()
    {
        try
        {
            _orderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>(
                $"{NavigationManager.BaseUri}orders/{OrderId}");
        }
        catch (Exception e)
        {
            _invalidOrder = true;
            Console.Error.WriteLine(e);
        }
    }

    async Task StartPollingTimerAsync()
    {
        while (IsOrderIncomplete && await _timer.WaitForNextTickAsync())
        {
            await GetLatestOrderStatusUpdatesAsync();
            StateHasChanged();
        }
    }

    public void Dispose() => _timer.Dispose();
}
