@using System.Drawing
@using System.Text.RegularExpressions
@inherits InputBase<Color>

<input type="color" @attributes="AdditionalAttributes" class="@CssClass" @bind="CurrentValueAsString"/>

@code {
    [Parameter] public string? ParsingErrorMessage { get; set; }

    public static string ColorToString(Color value) =>
        $"#{value.R:x2}{value.G:x2}{value.B:x2}";

    protected override string FormatValueAsString(Color value) =>
        ColorToString(value);

    static Regex _regex = new("^#([0-9a-f]{2}){3}$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

    protected override bool TryParseValueFromString(string? value, out Color result, out string? validationErrorMessage)
    {
        var match = _regex.Match(value);
        if (!match.Success)
        {
            validationErrorMessage = ParsingErrorMessage;
            result = Color.Red;
            return false;
        }

        var r = HexStringToByte(match.Groups[1].Captures[0].Value);
        var g = HexStringToByte(match.Groups[1].Captures[1].Value);
        var b = HexStringToByte(match.Groups[1].Captures[2].Value);

        validationErrorMessage = null;
        result = Color.FromArgb(r, g, b);
        return true;
    }

    static byte HexStringToByte(string hex)
    {
        const string hexChars = "0123456789abcdef";

        hex = hex.ToLowerInvariant();
        var result = (hexChars.IndexOf(hex[0]) * 16) + hexChars.IndexOf(hex[1]);
        return (byte)result;
    }

}
