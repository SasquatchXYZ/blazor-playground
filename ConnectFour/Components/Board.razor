@inject GameState State

<HeadContent>
    <style>
        :root {
        --board-bg: yellow; /** the color of the board **/
        --player1: red;             /** the color of the board **/
        --player2: blue;            /** the color of the board **/
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @_winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br/>
    <span class="alert-danger">@_errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@_pieces[1]"></span>
    }
</div>

@code {
    private string[] _pieces = new string[42];
    private string _winnerMessage = string.Empty;
    private string _errorMessage = string.Empty;

    private string CurrentTurn => (_winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (_winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        _errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            _pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        _winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    void ResetGame()
    {
        State.ResetBoard();
        _winnerMessage = string.Empty;
        _errorMessage = string.Empty;
        _pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

}
